/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Oto.ts":
/*!********************!*\
  !*** ./src/Oto.ts ***!
  \********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * UTAU原音設定ファイルを扱います。\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Oto = void 0;\nconst OtoRecord_1 = __webpack_require__(/*! ./OtoRecord */ \"./src/OtoRecord.ts\");\nclass Oto {\n    constructor() {\n        this.datas = {};\n    }\n    /**\n     * oto.iniのデータを分割し、datasに格納する。\n     * @param dirPath 原音ルートからoto.iniがあるディレクトリまでの相対パス\n     * @param data oto.iniのデータ\n     */\n    ParseOto(dirPath, data) {\n        const lines = data.replace(\"\\r\\n\", \"\\n\").split(\"\\n\");\n        lines.forEach((line) => {\n            if (line === \"\") {\n                //**空行は無視する */\n                return;\n            }\n            const record = new OtoRecord_1.OtoRecord(dirPath, line);\n            console.log(line);\n            if (this.datas[dirPath] && this.datas[dirPath][record.filename]) {\n                this.datas[dirPath][record.filename][record.alias] = record;\n            }\n            else if (this.datas[dirPath]) {\n                this.datas[dirPath][record.filename] = { [record.alias]: record };\n            }\n            else {\n                this.datas[dirPath] = { [record.filename]: { [record.alias]: record } };\n            }\n        });\n    }\n    /**\n     * dirpath,filename,aliasで指定したotoのパラメータを一括で変更する。\n     * キーが存在しない場合作成する。\n     * @param dirPath 原音ルートからoto.iniがあるディレクトリまでの相対パス\n     * @param filename oto.iniからwavファイルまでの相対パス\n     * @param alias エイリアス\n     * @param offset オフセット(左ブランク)\n     * @param overlap オーバーラップ\n     * @param pre 先行発声\n     * @param velocity 子音部(固定範囲)\n     * @param blank ブランク(右ブランク)\n     */\n    SetParams(dirPath, filename, alias, offset, overlap, pre, velocity, blank) {\n        if (this.HasOtoRecord(dirPath, filename, alias)) {\n            this.datas[dirPath][filename][alias].offset = offset;\n            this.datas[dirPath][filename][alias].overlap = overlap;\n            this.datas[dirPath][filename][alias].pre = pre;\n            this.datas[dirPath][filename][alias].velocity = velocity;\n            this.datas[dirPath][filename][alias].blank = blank;\n        }\n        else {\n            const line = filename +\n                \"=\" +\n                alias +\n                \",\" +\n                offset.toFixed(3) +\n                \",\" +\n                velocity.toFixed(3) +\n                \",\" +\n                blank.toFixed(3) +\n                \",\" +\n                pre.toFixed(3) +\n                \",\" +\n                overlap.toFixed(3);\n            if (this.datas[dirPath] && this.datas[dirPath][filename]) {\n                this.datas[dirPath][filename][alias] = new OtoRecord_1.OtoRecord(dirPath, line);\n            }\n            else if (this.datas[dirPath]) {\n                this.datas[dirPath][filename] = {\n                    [alias]: new OtoRecord_1.OtoRecord(dirPath, line),\n                };\n            }\n            else {\n                this.datas[dirPath] = {\n                    [filename]: {\n                        [alias]: new OtoRecord_1.OtoRecord(dirPath, line),\n                    },\n                };\n            }\n        }\n    }\n    /**\n     * エイリアスを変更する。\n     * 元のエイリアスが存在しない場合、空のOtoRecordを作成する。\n     * @param dirPath 原音ルートからoto.iniがあるディレクトリまでの相対パス\n     * @param filename oto.iniからwavファイルまでの相対パス\n     * @param alias 現在のエイリアス\n     * @param newAlias 新しいエイリアス\n     */\n    SetAlias(dirPath, filename, alias, newAlias) {\n        if (this.HasOtoRecord(dirPath, filename, alias)) {\n            this.datas[dirPath][filename][newAlias] =\n                this.datas[dirPath][filename][alias];\n            delete this.datas[dirPath][filename][alias];\n            this.datas[dirPath][filename][newAlias].alias = newAlias;\n        }\n        else {\n            const line = filename + \"=\" + newAlias + \",0,0,0,0,0\";\n            this.datas[dirPath][filename][newAlias] = new OtoRecord_1.OtoRecord(dirPath, line);\n        }\n    }\n    /**\n     * オフセット値を変更する。\n     * 元のエイリアスが存在しない場合、コンソールにエラーを出力する。\n     * @param dirPath 原音ルートからoto.iniがあるディレクトリまでの相対パス\n     * @param filename oto.iniからwavファイルまでの相対パス\n     * @param alias 現在のエイリアス\n     * @param offset オフセット(左ブランク)\n     */\n    SetOffset(dirPath, filename, alias, offset) {\n        if (this.HasOtoRecord(dirPath, filename, alias)) {\n            this.datas[dirPath][filename][alias].offset = offset;\n        }\n        else {\n            this.OutputHasNotKeyLog(dirPath, filename, alias);\n        }\n    }\n    /**\n     * オフセット値を変更する。\n     * 元のエイリアスが存在しない場合、コンソールにエラーを出力する。\n     * @param dirPath 原音ルートからoto.iniがあるディレクトリまでの相対パス\n     * @param filename oto.iniからwavファイルまでの相対パス\n     * @param alias 現在のエイリアス\n     * @param overlap オーバーラップ\n     */\n    SetOverlap(dirPath, filename, alias, overlap) {\n        if (this.HasOtoRecord(dirPath, filename, alias)) {\n            this.datas[dirPath][filename][alias].overlap = overlap;\n        }\n        else {\n            this.OutputHasNotKeyLog(dirPath, filename, alias);\n        }\n    }\n    /**\n     * 先行発声値を変更する。\n     * 元のエイリアスが存在しない場合、コンソールにエラーを出力する。\n     * @param dirPath 原音ルートからoto.iniがあるディレクトリまでの相対パス\n     * @param filename oto.iniからwavファイルまでの相対パス\n     * @param alias 現在のエイリアス\n     * @param pre 先行発声\n     */\n    SetPre(dirPath, filename, alias, pre) {\n        if (this.HasOtoRecord(dirPath, filename, alias)) {\n            this.datas[dirPath][filename][alias].pre = pre;\n        }\n        else {\n            this.OutputHasNotKeyLog(dirPath, filename, alias);\n        }\n    }\n    /**\n     * 子音部値を変更する。\n     * 元のエイリアスが存在しない場合、コンソールにエラーを出力する。\n     * @param dirPath 原音ルートからoto.iniがあるディレクトリまでの相対パス\n     * @param filename oto.iniからwavファイルまでの相対パス\n     * @param alias 現在のエイリアス\n     * @param pre 子音部(固定範囲)\n     */\n    SetVelocity(dirPath, filename, alias, velocity) {\n        if (this.HasOtoRecord(dirPath, filename, alias)) {\n            this.datas[dirPath][filename][alias].velocity = velocity;\n        }\n        else {\n            this.OutputHasNotKeyLog(dirPath, filename, alias);\n        }\n    }\n    /**\n     * ブランク値を変更する。\n     * 元のエイリアスが存在しない場合、コンソールにエラーを出力する。\n     * @param dirPath 原音ルートからoto.iniがあるディレクトリまでの相対パス\n     * @param filename oto.iniからwavファイルまでの相対パス\n     * @param alias 現在のエイリアス\n     * @param pre ブランク(右ブランク)\n     */\n    SetBlank(dirPath, filename, alias, blank) {\n        if (this.HasOtoRecord(dirPath, filename, alias)) {\n            this.datas[dirPath][filename][alias].blank = blank;\n        }\n        else {\n            this.OutputHasNotKeyLog(dirPath, filename, alias);\n        }\n    }\n    /**\n     * エイリアスの有無を確認する。\n     * @param dirPath 原音ルートからoto.iniがあるディレクトリまでの相対パス\n     * @param filename oto.iniからwavファイルまでの相対パス\n     * @param alias 現在のエイリアス\n     * @returns this.datas[dirPath][filename][alias]が存在すればtrue、しなければfalse\n     */\n    HasOtoRecord(dirPath, filename, alias) {\n        if (this.datas[dirPath] &&\n            this.datas[dirPath][filename] &&\n            this.datas[dirPath][filename][alias]) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * 元のエイリアスが存在しない場合、コンソールにエラーを出力する。\n     * @param dirPath 原音ルートからoto.iniがあるディレクトリまでの相対パス\n     * @param filename oto.iniからwavファイルまでの相対パス\n     * @param alias 現在のエイリアス\n     */\n    OutputHasNotKeyLog(dirPath, filename, alias) {\n        console.warn(\"dirPath:\" +\n            dirPath +\n            \"\\n filename:\" +\n            filename +\n            \"\\n alias:\" +\n            alias +\n            \"は存在しません。\");\n    }\n    /**\n     * 指定したOtoのレコードを返す。\n     * @param dirPath 原音ルートからoto.iniがあるディレクトリまでの相対パス\n     * @param filename oto.iniからwavファイルまでの相対パス\n     * @param alias 現在のエイリアス\n     * @returns this.datas[dirPath][filename][alias]\n     */\n    GetRecord(dirPath, filename, alias) {\n        if (this.HasOtoRecord(dirPath, filename, alias)) {\n            return this.datas[dirPath][filename][alias];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * oto.iniを読み込んでdatasに格納する。\n     * @param dirPath 原音ルートからoto.iniがあるディレクトリまでの相対パス\n     * @param otoPath oto.iniのファイルパス\n     */\n    InputOto(dirPath, oto, encoding = \"CP932\") {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n            if (typeof reader.result === \"string\") {\n                this.ParseOto(dirPath, reader.result);\n            }\n            else {\n                console.error(\"file can't read\");\n            }\n        });\n        reader.readAsText(oto, encoding);\n    }\n}\nexports.Oto = Oto;\n\n\n//# sourceURL=webpack://utauoto/./src/Oto.ts?");

/***/ }),

/***/ "./src/OtoRecord.ts":
/*!**************************!*\
  !*** ./src/OtoRecord.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * UTAU原音設定ファイル(oto.ini)の1行毎のレコードを扱います。\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OtoRecord = void 0;\nclass OtoRecord {\n    /**\n     * @param dirpath_ 原音ルートからの相対パス\n     * @param record oto.ini 1行分相当のテキストデータ {filename}={alias},{offset},{velocity},{blank},{pre},{overlap}\n     */\n    constructor(dirpath_, record) {\n        this.dirpath_ = dirpath_;\n        this.record = record;\n        this._dirpath = \"\";\n        this._filename = \"\";\n        this._alias = \"\";\n        this._offset = 0.0;\n        this._overlap = 0.0;\n        this._pre = 0.0;\n        this._velocity = 0.0;\n        this._blank = 0.0;\n        this.dirpath = dirpath_;\n        const splitByEqual = record.split(\"=\");\n        this.filename = splitByEqual[0];\n        const splitByComma = splitByEqual[1].split(\",\");\n        this.alias = splitByComma[0];\n        this.offset = splitByComma[1];\n        this.overlap = splitByComma[5];\n        this.pre = splitByComma[4];\n        this.velocity = splitByComma[2];\n        this.blank = splitByComma[3];\n    }\n    //**原音ルートからの相対パス */\n    set dirpath(value) {\n        this._dirpath = value;\n    }\n    //**ファイル名 */\n    set filename(value) {\n        this._filename = value;\n    }\n    //**エイリアス */\n    set alias(value) {\n        this._alias = value;\n    }\n    //** オフセット(左ブランク)。非数値の文字が与えられた場合、consoleにエラーを出力して0とする*/\n    set offset(value) {\n        if (typeof value === \"number\") {\n            this._offset = value;\n        }\n        else if (!Number.isNaN(parseFloat(value))) {\n            this._offset = parseFloat(value);\n        }\n        else {\n            console.log(value + \"is not Numer\");\n            this._offset = 0;\n        }\n    }\n    //** オーバーラップ。非数値の文字が与えられた場合、consoleにエラーを出力して0とする*/\n    set overlap(value) {\n        if (typeof value === \"number\") {\n            this._overlap = value;\n        }\n        else if (!Number.isNaN(parseFloat(value))) {\n            this._overlap = parseFloat(value);\n        }\n        else {\n            console.log(value + \"is not Numer\");\n            this._overlap = 0;\n        }\n    }\n    //** 先行発声。非数値の文字が与えられた場合、consoleにエラーを出力して0とする*/\n    set pre(value) {\n        if (typeof value === \"number\") {\n            this._pre = value;\n        }\n        else if (!Number.isNaN(parseFloat(value))) {\n            this._pre = parseFloat(value);\n        }\n        else {\n            console.log(value + \"is not Numer\");\n            this._pre = 0;\n        }\n    }\n    //** 子音部(固定範囲)。非数値の文字が与えられた場合、consoleにエラーを出力して0とする*/\n    set velocity(value) {\n        if (typeof value === \"number\") {\n            this._velocity = value;\n        }\n        else if (!Number.isNaN(parseFloat(value))) {\n            this._velocity = parseFloat(value);\n        }\n        else {\n            console.log(value + \"is not Numer\");\n            this._velocity = 0;\n        }\n    }\n    //** ブランク(右ブランク)。非数値の文字が与えられた場合、consoleにエラーを出力して0とする*/\n    set blank(value) {\n        if (typeof value === \"number\") {\n            this._blank = value;\n        }\n        else if (!Number.isNaN(parseFloat(value))) {\n            this._blank = parseFloat(value);\n        }\n        else {\n            console.log(value + \"is not Numer\");\n            this._blank = 0;\n        }\n    }\n    //**原音ルートからの相対パス */\n    get dirpath() {\n        return this._dirpath;\n    }\n    //**ファイル名 */\n    get filename() {\n        return this._filename;\n    }\n    //**エイリアス */\n    get alias() {\n        return this._alias;\n    }\n    //**オフセット(左ブランク) */\n    get offset() {\n        return this._offset;\n    }\n    //**オーバーラップ */\n    get overlap() {\n        return this._overlap;\n    }\n    //**先行発声 */\n    get pre() {\n        return this._pre;\n    }\n    //**子音部(固定範囲) */\n    get velocity() {\n        return this._velocity;\n    }\n    //**ブランク(右ブランク) */\n    get blank() {\n        return this._blank;\n    }\n}\nexports.OtoRecord = OtoRecord;\n\n\n//# sourceURL=webpack://utauoto/./src/OtoRecord.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/Oto.ts");
/******/ 	
/******/ })()
;